"use strict";(self.webpackChunkwriteopia_docs=self.webpackChunkwriteopia_docs||[]).push([[906],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=n,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return r?a.createElement(f,i(i({ref:t},p),{},{components:r})):a.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:n,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8076:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=r(7462),n=(r(7294),r(3905));const o={sidebar_position:0},i="Basics",l={unversionedId:"tutorial-basics/basics",id:"tutorial-basics/basics",title:"Basics",description:"Add the project in your gradle file:",source:"@site/docs/tutorial-basics/basics.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/basics",permalink:"/Writeopia/docs/tutorial-basics/basics",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/basics.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Getting started with Android",permalink:"/Writeopia/docs/category/getting-started-with-android"},next:{title:"Persistence",permalink:"/Writeopia/docs/tutorial-basics/persistence"}},s={},c=[{value:"Configuration",id:"configuration",level:2},{value:"StoriesTellerManager",id:"storiestellermanager",level:2},{value:"Drawers",id:"drawers",level:2},{value:"Display content",id:"display-content",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"basics"},"Basics"),(0,n.kt)("p",null,"Add the project in your gradle file:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-other"},'implementation("com.github.leandroborgesferreira:storyteller-models:[version]")\nimplementation("com.github.leandroborgesferreira:storyteller:[version]")\nimplementation("com.github.leandroborgesferreira:storyteller-persistence:[version]")\n')),(0,n.kt)("p",null,"Check releases for ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/leandroBorgesFerreira/StoriesTeller/releases"},"latest")," version."),(0,n.kt)("h2",{id:"configuration"},"Configuration"),(0,n.kt)("p",null,"Before displaying the content on the screen. It is necessary to configure ",(0,n.kt)("inlineCode",{parentName:"p"},"StoriesTellerManager")," which controls the state of the content, the ",(0,n.kt)("inlineCode",{parentName:"p"},"Drawer"),"s which are the classes responsible for each component of the edit and ",(0,n.kt)("inlineCode",{parentName:"p"},"StoriesTellerEditor")," which is the Composable responsible for drawing the whole editor on the screen."),(0,n.kt)("h2",{id:"storiestellermanager"},"StoriesTellerManager"),(0,n.kt)("p",null,"The class ",(0,n.kt)("inlineCode",{parentName:"p"},"StoriesTellerManager")," accepts many parameters, which will be covered in a different section, but you can simply call the constructor to have the default behavior:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Composable\nfun storiesTellerSample() {\n  StoriesTellerManager()\n}\n")),(0,n.kt)("h2",{id:"drawers"},"Drawers"),(0,n.kt)("p",null,"Each part of the text edition is drawn by the ",(0,n.kt)("inlineCode",{parentName:"p"},"StoryStepDrawer"),". This interface has the logic to draw one type of information from the text. There are many drawers already implemented and available in the ",(0,n.kt)("inlineCode",{parentName:"p"},"DefaultDrawers")," factory. Provide the ",(0,n.kt)("inlineCode",{parentName:"p"},"StoriesTellerManager")," for the default behavior:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"DefaultDrawers.create(\n  manager = noteEditorViewModel.storiesTellerManager \n)\n")),(0,n.kt)("h2",{id:"display-content"},"Display content"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"Composable")," responsible for drawing the text editor is ",(0,n.kt)("inlineCode",{parentName:"p"},"StoryTellerEditor"),". It needs at least a map with Drawers, the",(0,n.kt)("inlineCode",{parentName:"p"},"StoriesTellerManager")," and a ",(0,n.kt)("inlineCode",{parentName:"p"},"DrawState")," to draw."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Composable\nfun storiesTellerSample() {\n  val drawState = DrawState(\n    stories = mapOf(\n      0 to DrawStory(\n        StoryStep(type = "message", text = "Some text"),\n        isSelected = false\n      ),\n    )\n  )\n  \n  StoriesTellerEditor(\n    modifier = Modifier.fillMaxWidth().weight(1F),\n    storyState = drawState,\n    drawers = DefaultDrawers.create(\n      manager = StoriesTellerManager()\n    )\n  )\n}\n')),(0,n.kt)("p",null,"The above code should display a simple message on the screen and you should be able to interact with the text editor."),(0,n.kt)("p",null,"\u200b"))}u.isMDXComponent=!0}}]);